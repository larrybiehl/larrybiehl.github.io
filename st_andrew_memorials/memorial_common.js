   // The code to detect the browser is from:	 // http://developer.netscape.com/docs/examples/javascript/browser_type.html	 // convert all characters to lowercase to simplify testing //var agt=navigator.userAgent.toLowerCase();     // *** BROWSER VERSION ***     // Note: On IE5, these return 4, so use is_ie5up to detect IE5.     // Note: Opera and WebTV spoof Navigator.  We do strict client detection.     // If you want to allow spoofing, take out the tests for opera and webtv. //s_nav  = ((agt.indexOf('mozilla')!=-1) && (agt.indexOf('spoofer')==-1) //           && (agt.indexOf('compatible') == -1) && (agt.indexOf('opera')==-1) //                && (agt.indexOf('webtv')==-1)); 			 // *** PLATFORM ***//var is_win   = ( (agt.indexOf("win")!=-1) || (agt.indexOf("16bit")!=-1) );		// Determine if mobile device    //Safari on iPadOS doesn't report as 'mobile' when requesting desktop site, yet still fails to embed PDFslet isSafariIOSDesktopMode = (  window.navigator.platform !== undefined &&                                     window.navigator.platform === "MacIntel" &&                                     window.navigator.maxTouchPoints !== undefined &&                                     window.navigator.maxTouchPoints > 1 );    //Quick test for mobile devices.var isMobileDevice = (isSafariIOSDesktopMode || /Mobi|Tablet|Android|iPad|iPhone/.test(window.navigator.userAgent));//isMobileDevice = true;var ListCode = 1;var ListLoadedCode = 0;var Interval = 999;		// slideVector needs to be at least as large as the number of pdf files to be in the set.var slideVector = new Array(150);var FirstSlide = 0;var LastSlide = -1;var CurrentSlide = FirstSlide;var LastSlideShown = -1;var LastPDFSlide = -1;var IDvar Date_timevar ImageNamevar ImageHeight//var ImageWidthvar Captionvar NextSlidevar PreviousSlidevar TimerIDvar ImageNumber = -1;		// Used for case when pdfs cannot be embedded into the web page. Such as mobile devices.var WindowProxyValue = null		// Used for intoJS tourvar inIntroJSTourFlag = false;var ButtonGifs = new Array(4);ButtonGifs[0]=new Image();ButtonGifs[0].src = "first.gif";ButtonGifs[1]=new Image();ButtonGifs[1].src = "prev.gif";ButtonGifs[2]=new Image();ButtonGifs[2].src = "next.gif";ButtonGifs[3]=new Image();ButtonGifs[3].src = "last.gif";var ButtonDownGifs = new Array(4);ButtonDownGifs[0]=new Image();ButtonDownGifs[0].src = "first_down.gif";ButtonDownGifs[1]=new Image();ButtonDownGifs[1].src = "prev_down.gif";ButtonDownGifs[2]=new Image();ButtonDownGifs[2].src = "next_down.gif";ButtonDownGifs[3]=new Image();ButtonDownGifs[3].src = "last_down.gif";$(document).ready(function(){    	$('#show_me').click(function()     	{      $('*[data-intro-disabled]').each(function()       	{         if ($(this).is(':visible'))          	{            $(this).attr(                    'data-intro',                    $(this).data('intro-disabled')                		);            }             	         else          	{            $(this).removeAttr('data-intro');             }                    	});/*			introJs().oncomplete(function() {  		//alert("end of introduction");  		console.log ("jsExit: ");  		onIntroJSExit();		});*/        		inIntroJSTourFlag = true;      introJs().oncomplete(onIntroJSExit).onexit(onIntroJSExit).start();      //introJs().onexit(function() {      //		contole.log("jsExitRoutine: ");      //		});      		     	//introJs().start();          	});    // Attaching the event listener function to window's resize eventwindow.addEventListener("resize", WindowSizeChanged);});	// end ".ready"function AddListBreak (slideIndex, listBreak)	{	//console.log ("AddListBreak: slideIndex, id: " + slideIndex + ", " + listBreak);		this.fileName = "";	this.path = "";	this.date_time = "";	this.caption = "";	this.listBreak = listBreak;	this.listTitle = "";		this.PreviousSlide = -1;	this.NextSlide = -1;		}	// end "AddPDFDoc"function AddListBreakToSlideVector (slideIndex, listBreak)	{	slideVector[slideIndex] = new AddListBreak (index, listBreak);		if (LastPDFSlide > 0)		slideVector[LastPDFSlide].NextSlide = slideIndex + 1;		}function AddPDFDoc (slideIndex, fileName)	{	//console.log ("AddPDFDoc: slideIndex, id: " + slideIndex + ", " + id);		imageNumber = slideIndex + 1;	this.fileName = fileName;	this.path = "Memorial_Files/";	this.date_time = "";	this.caption = "";	this.listBreak = "";	this.listTitle = "Image " + imageNumber;		this.PreviousSlide = LastPDFSlide;	this.NextSlide = slideIndex + 1;		LastPDFSlide = slideIndex;		}	// end "AddPDFDoc"function AddPDFDoc2 (slideIndex, fileName, path)	{	//console.log ("AddPDFDoc: slideIndex, id, path: " + slideIndex + ", " + id + ", " + path);	imageNumber = slideIndex + 1;	this.fileName = fileName;	this.path = path;	this.date_time = "";	this.caption = "";	this.listBreak = "";	this.listTitle = "Image " + imageNumber;		this.PreviousSlide = LastPDFSlide;	this.NextSlide = slideIndex + 1;		LastPDFSlide = slideIndex;	}	// end "AddPDFDoc2"function ChangeList(){	StopTimer();		var listOption = document.getElementById("list");	//console.log ("ChangeList: listOption.innerHTML: " + listOption.innerHTML);	if (listOption.innerHTML == "Hide List")		ListCode = 0;			else	// listOption.innerHTML == "List"		ListCode = 1;			SetImageVariables(CurrentSlide);	var listViewElement = document.getElementById("listView");	var hidden = listViewElement.getAttribute("hidden");	//console.log ("ChangeList: ListCode: " + ListCode);	//console.log ("ChangeList: listView.hidden: " + hidden);	var mainSectionElement = document.getElementById("mainSection");			if (ListCode == 0)		{		//listViewElement.style.width = "50px";		//listViewElement.classList.toggle("hide");		listViewElement.setAttribute("hidden", "hidden");		document.getElementById("pdfFileContainer").style.gridColumn = "1 / span 2";		document.getElementById("footerID").style.gridColumn = "1 / span 2";		listOption.innerHTML = "Show List";				}	 	else		// ListCode != 0		{		//listViewElement.style.width = "150px";		//listViewElement.classList.toggle("hide");		listViewElement.removeAttribute("hidden");		document.getElementById("pdfFileContainer").style.gridColumn = "2";		document.getElementById("footerID").style.gridColumn = "2";		listOption.innerHTML = "Hide List";				}		RestartSlideShow ();}		// end "ChangeList"function ClickNext(slide, gifNumber){	//console.log ("ClickNext: slide, gifNumber: " + slide + " " + gifNumber);	//ImageNumber = gifNumber;	returnFlag = ItemClicked(slide);		//console.log ("ClickNext: number images: " + document.images.length);	document.images[gifNumber].src = ButtonGifs[gifNumber-1].src;		//console.log ("ClickNext: at end");	}		// end "ClickNext"// This function captures the left and right arrow key eventsdocument.onkeydown = function(evt) {	//console.log('onkeydown in memorial_common.js');	HandleKeyDownEvent(evt);	};// This function handles the down arrow key; go to last slidefunction downArrowPressed() {ItemClicked (LastSlide);   }	// end "downArrowPressed"function FinishPDFLoad(){       	//console.log ("FinishPDFLoad: at start; LastSlideShown: " + LastSlideShown);		if (LastSlideShown >= 0)		{		WindowSizeChanged();				const dateElement = document.getElementById("Date");		dateElement.innerHTML = slideVector[LastSlideShown].date_time;		const fileNameElement = document.getElementById("FileName");		fileNameElement.innerHTML = "file: " + slideVector[LastSlideShown].fileName;				}	// end "if (LastSlideShown >= 0)"		if (Interval != 999)		{		StartTimer();				}		// end "if (Interval != 999)"}	// end "FinishPDFLoad"function FinishLoad(){       	//console.log ("FinishLoad: at start; ImageNumber: " + ImageNumber);	LoadList ();		pdfMessageElement = document.getElementById("pdfMessage");		if (isMobileDevice)		{		pdfMessageElement.innerHTML = "Tap this line to see entire file in a separate window. Use left arrow in upper left to go back to the list."						// Add some space between buttons.		pdfMessageElement = document.getElementById("gif1");		pdfMessageElement.style.paddingLeft = "10px";		pdfMessageElement = document.getElementById("gif2");		pdfMessageElement.style.paddingLeft = "10px";		pdfMessageElement = document.getElementById("gif3");		pdfMessageElement.style.paddingLeft = "10px";				}	// end "if (isMobileDevice)"			else	// !isMobileDevice		{		pdfMessageElement.style.display = "none";       pdfMessageElement.removeAttribute("data-intro");				}		ItemClicked (FirstSlide);	ImageNumber = FirstSlide;			document.getElementById("listView").focus({preventScroll: true});}	// end "FinishLoad"var getUsableHeight = function() 	{	"use strict";  	// check if this page is within a app frame	var isInAppMode = ("standalone" in navigator && navigator.standalone) || (window.chrome && window.top.chrome.app && window.top.chrome.app.isInstalled);		var ua = navigator.userAgent;	// memoized values	var isIphone = ua.indexOf('iPhone') !== -1 || ua.indexOf('iPod') !== -1;	var isIpad = ua.indexOf('iPad') !== -1;	var isAndroid = ua.indexOf('Android') !== -1;	var isMobile = isIphone || isIpad || isAndroid;		// compute the missing area taken up by the header of the web browser to offset the screen height	var usableOffset = 0;	if (isIphone) {		usableOffset = 20;	} else if (isAndroid && ua.indexOf('Chrome') === -1) {		usableOffset = 1;	}	return function() {		if (!isMobile) {			return window.innerHeight;		}		var isLandscape = window.innerWidth > window.innerHeight, height;		// on ios devices, this must use screen		if(isIphone) {			height = isLandscape ? screen.width : screen.height;			if(!isInAppMode) {				height -= isLandscape ? 32 : 44;				height += 1;			}		} else {			height = (isLandscape ? window.outerWidth : window.outerHeight) / (window.devicePixelRatio || 1);		}		return height - usableOffset;	};};// This function captures the left and right arrow key eventsfunction HandleKeyDownEvent(evt) {   evt = evt || window.event;	//console.log('HandleKeyDownEvent: evt.keyCode: ' + evt.keyCode);	if (inIntroJSTourFlag)		{		return;				}		   switch (evt.keyCode)     	{        case 37:            leftArrowPressed();            break;                    case 38:            upArrowPressed();            break;                    case 39:            rightArrowPressed();            break;                    case 40:            downArrowPressed();            break;    	}}	// end "HandleKeyDownEvent"  /*function HandleRefresh (){	console.log ("HandleRefresh is called");		window.top.frames["LowerFrame"].frames["SlideImage"].location.reload();	window.top.frames["LowerFrame"].frames["Legend"].location.reload();}	// end "HandleRefresh"*//*// This function handles a change in the size of the web browser window.function HandleResizeWindow(){	SetImageVariables(CurrentSlide);	frames["LowerFrame"].frames["SlideImage"].location.reload();	window.TopFrame.Ctrlbtn.RestartSlideShow();}	// end "HandleResizeWindow"*///introJs().onexit(function() {//	console.log("exiting intrJS routine");//});function onIntroJSExit() {	inIntroJSTourFlag = false;	//console.log("In intrJS exit routine");}		//	This function handles changing to the selected image.function ItemClicked(iIndex){  	//console.log ("ItemClicked: iIndex & LastSlideShown: " + iIndex + " " + LastSlideShown);	if (iIndex == LastSlideShown)		return;		SetImageVariables(iIndex);		//if (isMobileDevice)	//	{	//	document.getElementById("pdfFileContainer").innerHTML = "Touch displayed page to see entire file in a separate window."	//	}		//if (!isMobileDevice)		//{		const pdfElement = document.getElementById("pdfFile");			pdfElement.src = ImageName;		//console.log ("ItemClicked: element.src: " + objElement.src);				//}	// end "!isMobileDevice"	/*		else	// isMobileDevice		{				// Need to display pdf directly on mobile devices				// First close any window already open.						//console.log ("ItemClicked: ImageName: " + ImageName);						if (WindowProxyValue != null)			{			WindowProxyValue.close ();			WindowProxyValue = null;			//console.log ("ItemClicked: in close WindowProxyValue");						}						WindowProxyValue = open (ImageName, "_blank", "popup=yes");		//console.log ("ItemClicked: WindowProxyValue: " + WindowProxyValue);						}	// end "else isMobileDevice"	*/			// Handle making the title in the list bolt for the title being shown.	if (LastSlideShown >= 0)		{		elementID = "d" + LastSlideShown;		document.getElementById(elementID).style.fontWeight = "normal";				}	// end "LastSlideShown >= 0"		elementID = "d" + iIndex;	document.getElementById(elementID).style.fontWeight = "bold";		document.getElementById(elementID).scrollIntoView(false);				if (Interval != 999)		{		StartTimer();				}		// end "if (Interval != 999)"			LastSlideShown = iIndex;	}	// end "ItemClicked"// This function handles the left arrow keyfunction leftArrowPressed() {ItemClicked (PreviousSlide);   }// This function loads the legend listfunction LoadList (){	var listElement = document.getElementById("listView");	if (ListLoadedCode == 0)		{		//console.log ("LoadList: listView: " + listElement);		//console.log ("LoadList: listElement.innerHTML: " + listElement.innerHTML);		listElement.innerHTML = '';		for (index=0; index<=LastSlide; index++)			{			//console.log ("index: " + index); 			if (slideVector[index].listBreak != '')				listElement.innerHTML = listElement.innerHTML + '<p>' + window.top.slideVector[index].listBreak + '</p>';				else	// slideVector[index].listBreak == ''				{				listElement.innerHTML = listElement.innerHTML + '<p id="d' + index + '"><a href="JavaScript:window.top.ItemClicked(' + index + ')">' + slideVector[index].listTitle + '</a></p>';				}			}	// end "for (index=0; index<window.top.LastSlide; index++)"					}	// end "if (ListLoadedCode == 0)"			ListLoadedCode = 1;			}	// end "LoadList"function MouseDown(gifNumber){	//console.log ("MouseDown: gifNumber: " + gifNumber);	//console.log ("MouseDown: document.images.length: " + document.images.length);	//console.log ("MouseDown: document.images[0].src: " + document.images[0].src);	//console.log ("MouseDown: document.images[1].src: " + document.images[1].src);	//console.log ("MouseDown: document.images[2].src: " + document.images[2].src);	//console.log ("MouseDown: document.images[3].src: " + document.images[3].src);	//console.log ("MouseDown: document.images[4].src: " + document.images[4].src);	doDownGifFlag = 0;	switch (gifNumber)		{		case 1:			if (FirstSlide != CurrentSlide)				doDownGifFlag = 1;			break;					case 2:			if (PreviousSlide != CurrentSlide)				doDownGifFlag = 1;			break;					case 3:			if (NextSlide != CurrentSlide)				doDownGifFlag = 1;			break;					case 4:			if (LastSlide != CurrentSlide)				doDownGifFlag = 1;			break;				}		// end "switch (gifNumber)"		if (doDownGifFlag == 1)		document.images[gifNumber].src = ButtonDownGifs[gifNumber-1].src;			return true;	}		// end "MouseDown"function MouseOver(gifNumber){	//console.log ("MouseOver: gifNumber = " + gifNumber);	switch (gifNumber)		{		case 1:			if (FirstSlide == CurrentSlide)				window.status="This is the first picture; button will not activate."; 						else		// top.FirstSlide != top.CurrentSlide				window.status="Click on this button to go to the first picture."; 			break;					case 2:			if (PreviousSlide == CurrentSlide)				status="This is first picture; button will not activate."; 						else		// top.PreviousSlide != top.CurrentSlide				status="Click on this button to go to the previous picture."; 			break;					case 3:			if (NextSlide == CurrentSlide)				status="This is the last picture; button will not activate."; 						else		// top.NextSlide != top.CurrentSlide				status="Click on this button to go to the next picture.";			break;					case 4:			if (LastSlide == CurrentSlide)				status="This is the last picture; button will not activate."; 						else		// top.LastSlide != top.CurrentSlide				status="Click on this button to go to the last picture."; 			break;				}		// end "switch (gifNumber)"			return true;	}		// end "MouseOver"function PDFContainerTouched (){	//console.log ("PDFContainerTouched: WindowProxyValue: " + WindowProxyValue);	if (WindowProxyValue != null)		{		//console.log ("PDFContainerTouched: WindowProxyValue2: " + WindowProxyValue);		WindowProxyValue.close ();		//console.log ("PDFContainerTouched: WindowProxyValue3: " + WindowProxyValue);		WindowProxyValue = null;				}			if (WindowProxyValue == null)		WindowProxyValue = open (ImageName, "_self", "popup=yes");}	// end "PDFContainerTouched"function PDFLoadError(){       	console.log ("PDFLoadError: at start; LastSlideShown: " + LastSlideShown);}	// end "PDFLoadError"/* This function sets up the image sizes for portrait type  */function RestartSlideShow(){    	if (Interval != 999)		{		StartTimer();				}		// end "if (Interval != 999)"}		// end "RestartSlideShow"// This function handles the right arrow keyfunction rightArrowPressed() {	//console.log ("rightArrowPressed: start");	ItemClicked (NextSlide);}	// end "rightArrowPressed"	//	This function handles setting the global variables to be used to create the image frame.function SetImageVariables (iIndex){  	lSlideVector = slideVector[iIndex];	//console.log ("SetImageVariables: iIndex " + iIndex);	//console.log ("SetImageVariables: path " + slideVector[iIndex].path);	//console.log ("SetImageVariables: fileName " + slideVector[iIndex].fileName);		fileName = slideVector[iIndex].fileName;	Date_time = slideVector[iIndex].date_time;	pathName = slideVector[iIndex].path + fileName;	Caption = slideVector[iIndex].caption;		ListBreak = slideVector[iIndex].listBreak;	ListTitle = slideVector[iIndex].listTitle;		SetSizeVariables (iIndex, pathName);	ImageName = slideVector[iIndex].ImageName;	//console.log ("SetImageVariables: ImageName " + ImageName);		CurrentSlide = iIndex;		if (iIndex < LastSlide)		//NextSlide = iIndex + 1;		NextSlide = slideVector[CurrentSlide].NextSlide;			else	// iIndex >= LastSlide		{		if (Interval == 999)			NextSlide = LastSlide;					else	// Interval != 999			NextSlide = FirstSlide;					}	// end "else iIndex >= LastSlide"			if (iIndex > FirstSlide)		//PreviousSlide = iIndex - 1;		PreviousSlide = slideVector[CurrentSlide].PreviousSlide;			else		PreviousSlide = FirstSlide;	}	// end "SetImageVariables"// This function sets the variables depending on the size of the image to be displayed// 	for the specified image.function SetSizeVariables (iIndex, pathName){   			slideVector[iIndex].ImageName = pathName;	//console.log ("SetSizeVariables slideVector: " + slideVector[iIndex].ImageName);				// Allow for scroll bar to right of image (16), window width (4), border around			// image (4) and space around edge (6).				//console.log ("window.innerWidth: " + window.innerWidth);	//console.log ("window.innerHeight: " + window.innerHeight);	/*	if (is_nav)		{		availWidth = window.innerWidth - 25;		//availWidth = window.innerWidth;		if (ListCode != 0)			availWidth -= 135;		availHeight = window.innerHeight - 60;		}	// end "if (is_nav)"	else	// !is_nav		{							availWidth = screen.availWidth - 50;		//availWidth = screen.availWidth;		if (ListCode != 0)			availWidth = availWidth - 135;		availHeight = screen.availHeight - 100;		if (is_win)			{			availHeight -= 90;			}		}	// end "else !is_nav"	*/	//window.top.ImageWidth = availWidth;	//window.top.ImageHeight = availHeight;	//console.log ("case5 ImageWidth: " + window.top.ImageWidth);	//console.log ("case5ImageHeight: " + window.top.ImageHeight);				}	// End "SetSizeVariables"function SlideShow(flag){	firstTimeFlag = 0;	var showOption = document.getElementById("show");	var showSelection = showOption.selectedIndex;		if (flag == 1)		{				// The slide show drop down menu has changed.				// Set up the slide show with the requested interval.						value = showOption.options[showSelection].value;				if (value > 0)			{			if (Interval != 999)				StopTimer();						Interval = value;			firstTimeFlag = 1;			flag = 0;						}		// end "if (value > 0)"				}		// end "if (flag == 1)"		if (flag == 0)		{				// This is a call from the timer itself. It is already stopped.						TimerID = 0;		if (firstTimeFlag == 0)			{			ItemClicked (NextSlide);						}					else	// firstTimeFlag == 1			{			StartTimer();						}				}		// end "if (flag == 0)"			else 	// flag == 1		{		StopTimer();				Interval = 999;				}		// end "else flag == 1"}		// end "SlideShow"function StartTimer(){	StopTimer();			delay = Interval * 1000;	TimerID = window.setTimeout ("SlideShow(0);", delay);}		// end "StartTimer"function StopTimer(){	if (TimerID != 0)		{		window.clearTimeout(TimerID);		TimerID = 0;				}}		// end "StopTimer"/*window.requestIdleCallback =  window.requestIdleCallback ||  function (callBack) {    var start = Date.now();    return setTimeout(function () {      callBack({        didTimeout: false,        timeRemaining: function () {          return Math.max(0, 50 - (Date.now() - start));        }      });    }, 1);  }*/// This function handles the up arrow key; go to first slidefunction upArrowPressed() {	ItemClicked (FirstSlide);   }	// end "upArrowPressed"// Defining event listener function window size changefunction WindowSizeChanged(){		var controlSectionElement = document.getElementById("controlSectionID");	var controlTableElement = document.getElementById("controlTableID");	var mainSectionElement = document.getElementById("mainSectionID");	var listViewElement = document.getElementById("listView");	var pdfContainerElement = document.getElementById("pdfFileContainer");	var containerElement = document.getElementById("container");	var pdfElement = document.getElementById("pdfFile");	var footerElement = document.getElementById("footerID");		//console.log ("window.innerHeight: " + window.innerHeight);	//console.log ("controlSectionElement.offsetHeight: " + controlSectionElement.offsetHeight);	//console.log ("controlTableElement.offsetHeight: " + controlTableElement.offsetHeight);	//console.log ("mainSectionElement.offsetHeight: " + mainSectionElement.offsetHeight);	//console.log ("pdfContainerElement.offsetHeight: " + pdfContainerElement.offsetHeight);	//console.log ("containerElement.offsetHeight: " + containerElement.offsetHeight);	//console.log ("pdfElement.offsetHeight: " + pdfElement.offsetHeight);	//console.log ("footerElement.offsetHeight: " + footerElement.offsetHeight);		//var difference = window.innerHeight - controlTableElement.offsetHeight - mainSectionElement.offsetHeight - footerElement.offsetHeight;	//console.log ("difference: " + difference);	//difference = 0;		//mainSectionBoundingRect = mainSectionElement.getBoundingClientRect();				//console.log ("mainSectionBoundingRect.left: " + mainSectionBoundingRect.left);	//console.log ("mainSectionBoundingRect.top: " + mainSectionBoundingRect.top);	//console.log ("mainSectionBoundingRect.right: " + mainSectionBoundingRect.right);	//console.log ("mainSectionBoundingRect.bottom: " + mainSectionBoundingRect.bottom);		//pdfContainerBoundingRect = pdfContainerElement.getBoundingClientRect();				//console.log ("pdfContainerElement.left: " + pdfContainerBoundingRect.left);	//console.log ("pdfContainerElement.top: " + pdfContainerBoundingRect.top);	//console.log ("pdfContainerElement.right: " + pdfContainerBoundingRect.right);	//console.log ("pdfContainerElement.bottom: " + pdfContainerBoundingRect.bottom);		//pdfContainerElementWidth = pdfContainerBoundingRect.right - pdfContainerBoundingRect.left;	//pdfContainerElementHeight = pdfContainerBoundingRect.bottom - pdfContainerBoundingRect.top;		//console.log ("pdfContainerElementWidth: " + pdfContainerElementWidth);	//console.log ("pdfContainerElement.offsetWidth: " + pdfContainerElement.offsetWidth);	//console.log ("pdfContainerElementHeight: " + pdfContainerElementHeight);		//pdfBoundingRect = pdfElement.getBoundingClientRect();				//console.log ("pdfBoundingRect.left: " + pdfBoundingRect.left);	//console.log ("pdfBoundingRect.top: " + pdfBoundingRect.top);	//console.log ("pdfBoundingRect.right: " + pdfBoundingRect.right);	//console.log ("pdfBoundingRect.bottom: " + pdfBoundingRect.bottom);		//pdfElementWidth = pdfBoundingRect.right - pdfBoundingRect.left;	//pdfElementHeight = pdfBoundingRect.bottom - pdfBoundingRect.top;		//console.log ("pdfElementWidth: " + pdfElementWidth);	//console.log ("pdfElement.offsetWidth: " + pdfElement.offsetWidth);	//console.log ("pdfElementHeight: " + pdfElementHeight);					// This does not work to get the padding value	//console.log ("pdfElement.style.paddingLeft: " + pdfElement.style.paddingLeft);	//console.log ("pdfElement.style.paddingTop: " + pdfElement.style.paddingTop);		availWidthForDocument =  pdfContainerElement.offsetWidth - 10;	//availHeightForDocument = pdfContainerElement.offsetHeight - 10 - infoLineElement.offsetHeight - 10;				// Need to allow space for gaps	availHeightForDocument = window.innerHeight - controlTableElement.offsetHeight - footerElement.offsetHeight - 25;	availHeightForList =  availHeightForDocument + footerElement.offsetHeight;		//availWidthForDocument = Math.trunc(availWidthForDocument/pdfContainerElement.offsetWidth  * 100);	//availHeightForDocument = Math.trunc(availHeightForDocument/(mainSectionElement.offsetHeight)  * 100);		if (isMobileDevice)		{		availHeightForDocument = getUsableHeight ();						// Allow space for message line		var pdfMessageElement = document.getElementById("pdfMessage");			availHeightForDocument = availHeightForDocument - controlTableElement.offsetHeight - footerElement.offsetHeight - 25;						availHeightForDocument = availHeightForDocument - pdfMessageElement.offsetHeight;				mainSectionElement.style.height = availHeightForDocument + "px";		containerElement.style.height = (availHeightForDocument-6) + "px";				availHeightForList =  availHeightForDocument + footerElement.offsetHeight;		listViewElement.style.height = availHeightForList + "px";				}		//console.log ("availWidthForDocument in percent: " + availWidthForDocument);	//console.log ("availHeightForDocument in px: " + availHeightForDocument);		if (!isMobileDevice)		{		//pdfElement.style.width = availWidthForDocument + "%";				mainSectionElement.style.height = availHeightForDocument + "px";		containerElement.style.height = (availHeightForDocument-6) + "px";				availHeightForList =  availHeightForDocument + footerElement.offsetHeight;		listViewElement.style.height = availHeightForList + "px";				}	// end "if (!isMobileDevice)"		//console.log ("pdfElement.style.width: " + pdfElement.style.width);	//console.log ("pdfElement.style.height: " + pdfElement.style.height);		const fileNameElement = document.getElementById("FileName");		if (isMobileDevice)		fileNameElement.innerHTML = "inH: " + window.innerHeight + "scH: " + screen.height + "; Cn: " + controlTableElement.offsetHeight + "; pCH: " + pdfContainerElement.offsetHeight + "; fH: " + footerElement.offsetHeight + "; aH: " + availHeightForDocument + "; scW: " + screen.width;	//else	//	fileNameElement.innerHTML = "inH: " + window.innerHeight + "; Cn: " + controlSectionElement.offsetHeight + "; pCH: " + pdfContainerElement.offsetHeight + "; pH: " + pdfElement.offsetHeight + "; %H: " + availHeightForDocument + "; D: " + difference + "; inW: " + window.innerWidth;	}	// end "WindowSizeChanged"//ItemClicked (FirstSlide);//<object id="pdfFile" data="Memorial_Files/Adams_Lisa_page_for_book.pdf" onload="FinishPDFLoad()" onerror="PDFLoadError()">object can't be rendered</object>//<iframe id="pdfFile" src="Memorial_Files/Adams_Lisa_page_for_book.pdf" onload="FinishPDFLoad()" onerror="PDFLoadError()">object can't be rendered</iframe>//	<!-->//	<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">//	<meta http-equiv="Pragma" content="no-cache">//	<meta http-equiv="Expires" content="0">-->     